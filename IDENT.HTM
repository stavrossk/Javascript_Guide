<BODY BGCOLOR="#FFFFFF">
<A NAME="1001595">
<P>
</A><A NAME="1001596">
<P>
</A><A NAME="996824">
<H1>Values, variables, and literals
</H1>
</A>

<A NAME="1004219">

<img src="graphics/identa.gif">

his chapter discusses values that JavaScript recognizes and describes the fundamental building blocks of JavaScript expressions: variables and literals.<P></A>


<!------------------------------>
<HR>
<A NAME="Values"></A>
<A NAME="1004665">
<H1> Values</H1>
</A>
<A NAME="1004220">
JavaScript recognizes the following types of values:<P></A>
<ul><A NAME="1004221">
<LI>Numbers, such as 42 or 3.14159
</A><A NAME="1004222">
<LI>Logical (Boolean) values, either true or false
</A><A NAME="1004223">
<LI>Strings, such as "Howdy!"
</A><A NAME="1004224">
<LI><B>null</B>, a special keyword denoting a null value
</A></ul><A NAME="1004225">
This relatively small set of types of values, or <I>data types</I>, enables you to perform useful functions with your applications. There is no explicit distinction between integer and real-valued numbers. Nor is there an explicit date data type in Navigator. However, you can use the <I>Date</I> object and its methods to handle dates.<P></A>
<A NAME="1004226">
Objects and functions are the other fundamental elements in the language. You can think of objects as named containers for values, and functions as procedures that your application can perform.<P></A>

<A NAME="Data type conversion"></A>
<A NAME="1004227">
<H2> Data type conversion</H2>
</A>

<A NAME="1004228">
JavaScript is a loosely typed language. That means you do not have to specify the data type of a variable when you declare it, and data types are converted automatically as needed during script execution. So, for example, you could define a variable as follows:<P></A>
<A NAME="1004229">
<PRE>var answer = 42</PRE>
</A>
<A NAME="1004230">
And later, you could assign the same variable a string value, for example,<P></A>
<A NAME="1004231">
<PRE>answer = "Thanks for all the fish..."</PRE>
</A>
<A NAME="1004232">
Because JavaScript is loosely typed, this assignment does not cause an error message.<P></A>
<A NAME="1004233">
In expressions involving numeric and string values, JavaScript converts the numeric values to strings. For example, consider the following statements:<P></A>
<A NAME="1004234">
<PRE>x = "The answer is " + 42<br>y = 42 + " is the answer."</PRE>
</A>
<A NAME="1004235">
The first statement returns the string "The answer is 42." The second statement returns the string "42 is the answer."<P></A>

<a name="1004236">
<blockquote>For more 
information on these 
functions, see 
<a href="builtin.htm#996824">Chapter&nbsp;9, "Built-in 
objects and 
functions."</a>
</blockquote>
</a>
<A NAME="1005189">
JavaScript provides several special functions for manipulating string and numeric values:<P></A>
<ul><A NAME="1004237">
<LI><B><a href="ref_d-e.htm#573">eval</a></B> attempts to evaluate a string representing any JavaScript literals or variables, converting it to a number.
</A><A NAME="1004238">
<LI><B><a href="ref_m-q.htm#177816">parseInt</a></B> converts a string to an integer of the specified radix (base), if possible.
</A><A NAME="1004239">
<LI><B><a href="ref_m-q.htm#177786">parseFloat</a></B> converts a string to a floating-point number, if possible.
</A></ul>

<!------------------------------>
<HR>
<A NAME="Variables"></A>
<A NAME="1004240">
<H1> Variables</H1>
</A>
<A NAME="1004241">
You use variables as symbolic names for values in your application. You give variables names by which you refer to them and which must conform to certain rules.<P></A>
<A NAME="1004242">
A JavaScript identifier, or <I>name,</I> must start with a letter or underscore ("_"); subsequent characters can also be digits (0-9). Because JavaScript is case sensitive, letters include the characters "A" through "Z" (uppercase) and the characters "a" through "z" (lowercase).<P></A>
<A NAME="1004244">
Some examples of legal names are <I>Number_hits</I>, <I>temp99</I>, and <I>_name.</I><P></A>

<A NAME="Variable scope"></A>
<A NAME="1004248">
<H2> Variable scope</H2>
</A>

<A NAME="1004249">
You can declare a variable in two ways:<P></A>
<ul><A NAME="1004250">
<LI>By simply assigning it a value; for example, <code>x = 42</code>
</A><A NAME="1004251">
<LI>With the keyword <B>var</B>; for example, <code>var x = 42</code>
</A></ul><A NAME="1005957">
When you set a variable identifier by assignment outside of a function, it is called a <I>global</I> variable, because it is available everywhere in the current document. When you declare a variable within a function, it is called a <I>local</I> variable, because it is available only within the function. Using <B>var</B> is optional, but you need to use it if you want to declare a local variable inside a function that has already been declared as a global variable.<P></A>

<a name="1005958">
<blockquote>For information on 
using variables across 
frames and windows, 
see <a href="windows.htm#996824">Chapter&nbsp;3, "Using 
windows and 
frames."</a>
</blockquote>
</a>
<A NAME="1005363">
You can access global variables declared in one window or frame from another window or frame by specifying the window or frame name. For example, if a variable called <I>phoneNumber</I> is declared in a FRAMESET document, you can refer to this variable from a child frame as <code>parent.phoneNumber</code>.<P></A>


<!------------------------------>
<HR>
<A NAME="Literals"></A>
<A NAME="1004254">
<H1> Literals</H1>
</A>
<A NAME="1004255">
You use literals to represent values in JavaScript. These are fixed values, not variables, that you <I>literally</I> provide in your script. <P></A>

<A NAME="Integers"></A>
<A NAME="1004259">
<H2> Integers</H2>
</A>

<A NAME="1004260">
Integers can be expressed in decimal (base 10), hexadecimal (base 16), and octal (base 8). A decimal integer literal consists of a sequence of digits without a leading 0 (zero). A leading 0 (zero) on an integer literal indicates it is in octal; a leading 0x (or 0X) indicates hexadecimal. Hexadecimal integers can include digits (0-9) and the letters a-f and A-F. Octal integers can include only the digits 0-7. <P></A>
<A NAME="1005255">
Some examples of integer literals are: 42 0xFFF, and -345.<P></A>

<A NAME="Floating-point literals"></A>
<A NAME="1004262">
<H2> Floating-point literals</H2>
</A>

<A NAME="1004263">
A floating-point literal can have the following parts: a decimal integer, a decimal point ("."), a fraction (another decimal number), an exponent, and a type suffix. The exponent part is an "e" or "E" followed by an integer, which can be signed (preceded by "+" or "-"). A floating-point literal must have at least one digit, plus either a decimal point or "e" (or "E"). <P></A>
<A NAME="1005256">
Some examples of floating-point literals are 3.1415, -3.1E12, .1e12, and 2E-12<P></A>

<A NAME="Boolean literals"></A>
<A NAME="1004268">
<H2> Boolean literals</H2>
</A>

<A NAME="1004269">
The Boolean type has two literal values: <B>true</B> and <B>false</B>.<P></A>

<A NAME="String literals"></A>
<A NAME="1004394">
<H2> String literals</H2>
</A>

<A NAME="1004395">
A string literal is zero or more characters enclosed in double (") or single (<code>'</code>) quotation marks. A string must be delimited by quotation marks of the same type; that is, either both single quotation marks or double quotation marks. The following are examples of string literals:<P></A>
<ul><A NAME="1004272">
<LI><code>"blah"</code>
</A><A NAME="1004273">
<LI><code>'blah'</code>
</A><A NAME="1004274">
<LI><code>"1234"</code>
</A><A NAME="1004275">
<LI><code>"one line \n another line"</code>
</A></ul><A NAME="1004698">
In addition to ordinary characters, you can also include special characters in strings, as shown in the last element in the preceding list. The following table lists the special characters that you can use in JavaScript strings. 

<P><TABLE BORDER="2">
<CAPTION></CAPTION>
<tr align=left valign=bottom><th><b><A NAME="1004701">
Character</A><B><th><b><A NAME="1004703">
Meaning</A><B>
<tr align=left valign=top><td><A NAME="1004705">
\b
</A><BR>

<td><A NAME="1004707">
backspace
</A><BR>



<tr align=left valign=top><td><A NAME="1004709">
\f
</A><BR>

<td><A NAME="1004711">
form feed
</A><BR>



<tr align=left valign=top><td><A NAME="1004713">
\n
</A><BR>

<td><A NAME="1004715">
new line
</A><BR>



<tr align=left valign=top><td><A NAME="1004717">
\r
</A><BR>

<td><A NAME="1004719">
carriage return
</A><BR>



<tr align=left valign=top><td><A NAME="1004721">
\t
</A><BR>

<td><A NAME="1004723">
tab
</A><BR>



<tr align=left valign=top><td><A NAME="1004738">
\\
</A><BR>

<td><A NAME="1004740">
backslash character
</A><BR>




</TABLE>

<TABLE>
<TR><TD>
</TABLE>


<P></A>

<A NAME="Escaping characters"></A>
<A NAME="1004283">
<H3> Escaping characters</H3>
</A>

<A NAME="1004284">
For characters not listed in the preceding table, a preceding backslash is ignored, with the exception of a quotation mark and the backslash character itself.<P></A>
<A NAME="1005147">
You can insert quotation marks inside strings by preceding them with a backslash. This is known as <I>escaping</I> the quotation marks. For example,<P></A>
<A NAME="1004285">
<PRE>var quote = "He read \"The Cremation of Sam McGee\" by R.W. Service."<br>document.write(quote)</PRE>
</A>
<A NAME="1004733">
The result of this would be<P></A>
<A NAME="1004734">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;He read "The Cremation of Sam McGee" by R.W. Service.<P></A>
<A NAME="1004735">
To include a literal backslash inside a string, you must escape the backslash character. For example, to assign the file path <code>c:\temp</code> to a string, use the following:<P></A>
<A NAME="1004736">
<PRE>var home = <code>"</code>c:\\temp<code>"</code></PRE>
</A>
